{"ast":null,"code":"import { PLUS_UN, MOINS_UN } from \"../Action/types\";\nconst initialState = {\n  quantité: 1\n};\n\nconst calcReducer = (state = initialState, action) => {\n  if (action.type === PLUS_UN) {\n    return {\n      quantité: state.quantité + 1\n    };\n  } else if (action.type === MOINS_UN) {\n    if (state.quantité > 1) {\n      return {\n        quantité: state.quantité - 1\n      };\n    }\n  } // Nesting the reducers on PLUS_UN and MOINS_UN\n\n\n  if ([PLUS_UN, MOINS_UN].includes(action.type)) {\n    if (!action.payload.id) {\n      return state;\n    }\n\n    const index = state.panier.findIndex(({\n      id\n    }) => id === action.payload.id); // If not found, do nothing\n\n    if (index === -1) {\n      return state;\n    }\n\n    const elementsBefore = state.panier.slice(0, index); // There you have the nesting.\n\n    const updatedElement = calcReducer(state.panier[index], action);\n    const elementsAfter = state.panier.slice(index + 1);\n    return { ...state,\n      panier: [...elementsBefore, updatedElement, ...elementsAfter]\n    };\n  }\n\n  return state;\n};\n\nexport default calcReducer;\n/*\n\nimport { SUM_PANIER } from \"../Action/types\";\n\nconst initialState = {\n  sum: 0,\n};\n\nconst calcReducer = (state = initialState, action) => {\n  if (action.type === SUM_PANIER) {\n    return { sum: state.sum };\n  }\n  return state;\n};\n\nexport default calcReducer;\n\n*/","map":{"version":3,"sources":["/home/salim/Bureau/Resto-app-test/src/Reducers/CalcReducer.js"],"names":["PLUS_UN","MOINS_UN","initialState","quantité","calcReducer","state","action","type","includes","payload","id","index","panier","findIndex","elementsBefore","slice","updatedElement","elementsAfter"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,iBAAlC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AADS,CAArB;;AAIA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACpD,MAAIA,MAAM,CAACC,IAAP,KAAgBP,OAApB,EAA6B;AAC3B,WAAO;AAAEG,MAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,GAAiB;AAA7B,KAAP;AACD,GAFD,MAEO,IAAIG,MAAM,CAACC,IAAP,KAAgBN,QAApB,EAA8B;AACnC,QAAII,KAAK,CAACF,QAAN,GAAiB,CAArB,EAAwB;AACtB,aAAO;AAAEA,QAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,GAAiB;AAA7B,OAAP;AACD;AACF,GAPmD,CASpD;;;AACA,MAAI,CAACH,OAAD,EAAUC,QAAV,EAAoBO,QAApB,CAA6BF,MAAM,CAACC,IAApC,CAAJ,EAA+C;AAC7C,QAAI,CAACD,MAAM,CAACG,OAAP,CAAeC,EAApB,EAAwB;AACtB,aAAOL,KAAP;AACD;;AAED,UAAMM,KAAK,GAAGN,KAAK,CAACO,MAAN,CAAaC,SAAb,CAAuB,CAAC;AAAEH,MAAAA;AAAF,KAAD,KAAYA,EAAE,KAAKJ,MAAM,CAACG,OAAP,CAAeC,EAAzD,CAAd,CAL6C,CAM7C;;AACA,QAAIC,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,aAAON,KAAP;AACD;;AAED,UAAMS,cAAc,GAAGT,KAAK,CAACO,MAAN,CAAaG,KAAb,CAAmB,CAAnB,EAAsBJ,KAAtB,CAAvB,CAX6C,CAY7C;;AACA,UAAMK,cAAc,GAAGZ,WAAW,CAACC,KAAK,CAACO,MAAN,CAAaD,KAAb,CAAD,EAAsBL,MAAtB,CAAlC;AACA,UAAMW,aAAa,GAAGZ,KAAK,CAACO,MAAN,CAAaG,KAAb,CAAmBJ,KAAK,GAAG,CAA3B,CAAtB;AAEA,WAAO,EACL,GAAGN,KADE;AAELO,MAAAA,MAAM,EAAE,CAAC,GAAGE,cAAJ,EAAoBE,cAApB,EAAoC,GAAGC,aAAvC;AAFH,KAAP;AAID;;AACD,SAAOZ,KAAP;AACD,CAhCD;;AAkCA,eAAeD,WAAf;AAEA","sourcesContent":["import { PLUS_UN, MOINS_UN } from \"../Action/types\";\n\nconst initialState = {\n  quantité: 1,\n};\n\nconst calcReducer = (state = initialState, action) => {\n  if (action.type === PLUS_UN) {\n    return { quantité: state.quantité + 1 };\n  } else if (action.type === MOINS_UN) {\n    if (state.quantité > 1) {\n      return { quantité: state.quantité - 1 };\n    }\n  }\n\n  // Nesting the reducers on PLUS_UN and MOINS_UN\n  if ([PLUS_UN, MOINS_UN].includes(action.type)) {\n    if (!action.payload.id) {\n      return state;\n    }\n\n    const index = state.panier.findIndex(({ id }) => id === action.payload.id);\n    // If not found, do nothing\n    if (index === -1) {\n      return state;\n    }\n\n    const elementsBefore = state.panier.slice(0, index);\n    // There you have the nesting.\n    const updatedElement = calcReducer(state.panier[index], action);\n    const elementsAfter = state.panier.slice(index + 1);\n\n    return {\n      ...state,\n      panier: [...elementsBefore, updatedElement, ...elementsAfter],\n    };\n  }\n  return state;\n};\n\nexport default calcReducer;\n\n/*\n\nimport { SUM_PANIER } from \"../Action/types\";\n\nconst initialState = {\n  sum: 0,\n};\n\nconst calcReducer = (state = initialState, action) => {\n  if (action.type === SUM_PANIER) {\n    return { sum: state.sum };\n  }\n  return state;\n};\n\nexport default calcReducer;\n\n*/\n"]},"metadata":{},"sourceType":"module"}