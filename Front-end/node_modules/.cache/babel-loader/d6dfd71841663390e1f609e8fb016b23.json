{"ast":null,"code":"import { GET_ALL_FOODS, SELECT_FOODS, GET_ALL_PANIER, DELETE_FOODS } from \"../Action/types\";\nconst initialState = {\n  foods: [],\n  panier: []\n};\nexport default function foodReducer(state = initialState, action) {\n  if (action.type === GET_ALL_FOODS) {\n    return { ...state,\n      foods: action.payload\n    };\n  }\n\n  if (action.type === SELECT_FOODS) {\n    console.log(action.payload);\n    let x = Object(state.panier);\n    return { ...state,\n      panier: [action.payload, ...x]\n    };\n  }\n\n  if (action.type === GET_ALL_PANIER) {\n    return { ...state,\n      panier: action.payload\n    };\n  }\n\n  if (action.type === DELETE_FOODS) {\n    return state.panier.filter(panier => panier.id !== action.payload);\n  } // Nesting the reducers on PLUS_UN and MOINS_UN\n\n\n  if ([PLUS_UN, MOINS_UN].includes(action.type)) {\n    if (!action.payload.id) {\n      return state;\n    }\n\n    const index = state.panier.findIndex(({\n      id\n    }) => id === action.payload.id); // If not found, do nothing\n\n    if (index === -1) {\n      return state;\n    }\n\n    const elementsBefore = state.panier.slice(0, index); // There you have the nesting.\n\n    const updatedElement = calcReducer(state.panier[index], action);\n    const elementsAfter = state.panier.slice(index + 1);\n    return { ...state,\n      panier: [...elementsBefore, updatedElement, ...elementsAfter]\n    };\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/salim/Bureau/Resto-app-test/src/Reducers/FoodReducer.js"],"names":["GET_ALL_FOODS","SELECT_FOODS","GET_ALL_PANIER","DELETE_FOODS","initialState","foods","panier","foodReducer","state","action","type","payload","console","log","x","Object","filter","id","PLUS_UN","MOINS_UN","includes","index","findIndex","elementsBefore","slice","updatedElement","calcReducer","elementsAfter"],"mappings":"AAAA,SACEA,aADF,EAEEC,YAFF,EAGEC,cAHF,EAIEC,YAJF,QAKO,iBALP;AAOA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,MAAM,EAAE;AAFW,CAArB;AAKA,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAAGJ,YAA7B,EAA2CK,MAA3C,EAAmD;AAChE,MAAIA,MAAM,CAACC,IAAP,KAAgBV,aAApB,EAAmC;AACjC,WAAO,EACL,GAAGQ,KADE;AAELH,MAAAA,KAAK,EAAEI,MAAM,CAACE;AAFT,KAAP;AAID;;AAED,MAAIF,MAAM,CAACC,IAAP,KAAgBT,YAApB,EAAkC;AAChCW,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACE,OAAnB;AACA,QAAIG,CAAC,GAAGC,MAAM,CAACP,KAAK,CAACF,MAAP,CAAd;AACA,WAAO,EAAE,GAAGE,KAAL;AAAYF,MAAAA,MAAM,EAAE,CAACG,MAAM,CAACE,OAAR,EAAiB,GAAGG,CAApB;AAApB,KAAP;AACD;;AAED,MAAIL,MAAM,CAACC,IAAP,KAAgBR,cAApB,EAAoC;AAClC,WAAO,EACL,GAAGM,KADE;AAELF,MAAAA,MAAM,EAAEG,MAAM,CAACE;AAFV,KAAP;AAID;;AACD,MAAIF,MAAM,CAACC,IAAP,KAAgBP,YAApB,EAAkC;AAChC,WAAOK,KAAK,CAACF,MAAN,CAAaU,MAAb,CAAqBV,MAAD,IAAYA,MAAM,CAACW,EAAP,KAAcR,MAAM,CAACE,OAArD,CAAP;AACD,GAtB+D,CAuB/D;;;AACA,MAAI,CAACO,OAAD,EAAUC,QAAV,EAAoBC,QAApB,CAA6BX,MAAM,CAACC,IAApC,CAAJ,EAA+C;AAC9C,QAAI,CAACD,MAAM,CAACE,OAAP,CAAeM,EAApB,EAAwB;AACtB,aAAOT,KAAP;AACD;;AAED,UAAMa,KAAK,GAAGb,KAAK,CAACF,MAAN,CAAagB,SAAb,CAAuB,CAAC;AAAEL,MAAAA;AAAF,KAAD,KAAYA,EAAE,KAAKR,MAAM,CAACE,OAAP,CAAeM,EAAzD,CAAd,CAL8C,CAM9C;;AACA,QAAII,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,aAAOb,KAAP;AACD;;AAED,UAAMe,cAAc,GAAGf,KAAK,CAACF,MAAN,CAAakB,KAAb,CAAmB,CAAnB,EAAsBH,KAAtB,CAAvB,CAX8C,CAY9C;;AACA,UAAMI,cAAc,GAAGC,WAAW,CAAClB,KAAK,CAACF,MAAN,CAAae,KAAb,CAAD,EAAsBZ,MAAtB,CAAlC;AACA,UAAMkB,aAAa,GAAGnB,KAAK,CAACF,MAAN,CAAakB,KAAb,CAAmBH,KAAK,GAAG,CAA3B,CAAtB;AAEA,WAAO,EACL,GAAGb,KADE;AAELF,MAAAA,MAAM,EAAE,CAAC,GAAGiB,cAAJ,EAAoBE,cAApB,EAAoC,GAAGE,aAAvC;AAFH,KAAP;AAID;;AACD,SAAOnB,KAAP;AACD","sourcesContent":["import {\n  GET_ALL_FOODS,\n  SELECT_FOODS,\n  GET_ALL_PANIER,\n  DELETE_FOODS,\n} from \"../Action/types\";\n\nconst initialState = {\n  foods: [],\n  panier: [],\n};\n\nexport default function foodReducer(state = initialState, action) {\n  if (action.type === GET_ALL_FOODS) {\n    return {\n      ...state,\n      foods: action.payload,\n    };\n  }\n\n  if (action.type === SELECT_FOODS) {\n    console.log(action.payload);\n    let x = Object(state.panier);\n    return { ...state, panier: [action.payload, ...x] };\n  }\n\n  if (action.type === GET_ALL_PANIER) {\n    return {\n      ...state,\n      panier: action.payload,\n    };\n  }\n  if (action.type === DELETE_FOODS) {\n    return state.panier.filter((panier) => panier.id !== action.payload);\n  }\n   // Nesting the reducers on PLUS_UN and MOINS_UN\n   if ([PLUS_UN, MOINS_UN].includes(action.type)) {\n    if (!action.payload.id) {\n      return state;\n    }\n\n    const index = state.panier.findIndex(({ id }) => id === action.payload.id);\n    // If not found, do nothing\n    if (index === -1) {\n      return state;\n    }\n\n    const elementsBefore = state.panier.slice(0, index);\n    // There you have the nesting.\n    const updatedElement = calcReducer(state.panier[index], action);\n    const elementsAfter = state.panier.slice(index + 1);\n\n    return {\n      ...state,\n      panier: [...elementsBefore, updatedElement, ...elementsAfter],\n    };\n  }\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}